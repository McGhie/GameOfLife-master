@model Gameoflife.Models.UserTemplateMetadata

@{
    ViewBag.Title = "Create";
}

<script src="~/Scripts/createTemplate.js"></script>



<div id="create">

    <div class="theGame">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4 class= "golbuilder">Game of life builder</h4>

                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10" autofocus>
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control",id="TemplateName", placeholder = "Enter name", autofocus = "autofocus", required = "true" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div id="sizehide">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Height, htmlAttributes: new {@class = "control-label col-md-2"})

                        <div class="col-md-5 createCellSize" id="high">
                            @Html.EditorFor(model => model.Height, new {htmlAttributes = new {@class = "form-control", id = "y", type = "range", min = "1", max = "20"}})

                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Width, htmlAttributes: new {@class = "control-label col-md-2"})
                        <div class="col-md-5 createCellSize" id="width">
                            @Html.EditorFor(model => model.Width, new {htmlAttributes = new {@class = "form-control ", id = "x", type = "range", min = "1", max = "20"}})
                        </div>
                    </div>
                </div>
                    <div class="form-group" style="display: none">
                        @Html.LabelFor(model => model.Cells, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Cells, new { htmlAttributes = new { @class = "form-control", id = "CellInputDevice" } })
                            @Html.ValidationMessageFor(model => model.Cells, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    <div class="form-group" id="hiddenSubmitButton">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Ship Template to the Warehouse" class="btn btn-default gamebtn" id="btn" />
                        </div>
                    </div>

                    <br>
                </div>
        }
        <div>
            <p>
                <button onclick="createblanktemplate()" id="blankTemplate" class="gamebtn">Initialise Template Foundations</button>
                <button onclick="seedCells()" id="seed_Cells" class="gamebtn">Seed Cells</button>
                <button onclick="savetemplatedata()" id="newTemplate" class="gamebtn">Set Template in Stone</button>
            </p>

            <table id="myTable"><!--<tr><span id="cellBuilderHelper">Click on the cells to make them alive</span></tr>--></table>


            <p class="createTemplateInstructions">
                <h4> Instructions:</h4>
                Enter Game Name, Select Height and Width Range <b>MIN</b> 1 <b>Max</b> 20, Initialise Template <br/>
                Click in the black window or seed Cells or do both (green is alive and black is dead) <br/>
                Set the template in stone, And then ship. You can then go and play you new Game.
            </p>

            <br/>
            <hr/>
        </div>
        </div>
        <div class="col-md-offset-2 col-md-10">
            @Html.ActionLink("Back to List", "Index")
        </div>
        <div>
        </div>
    </div>
    


      

   






