@model Gameoflife.Models.UserTemplateMetadata

@{
    ViewBag.Title = "Create";
}

<script src="~/Scripts/createTemplate.js"></script>



<div id="create">

    <h2>Create</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>UserTemplate</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" autofocus>
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter name", autofocus = "autofocus" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5 createCellSize" id="high">
                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control", id = "y", type = "number", min = "1", max = "20" } })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5 createCellSize" id="width">
                    @Html.EditorFor(model => model.Width, new { htmlAttributes = new { @class = "form-control ", id = "x", type = "number", min = "1", max = "20" } })
                    @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="display:none">
                @Html.LabelFor(model => model.Cells, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Cells, new { htmlAttributes = new { @class = "form-control", id = "CellInputDevice" } })
                    @Html.ValidationMessageFor(model => model.Cells, "", new { @class = "text-danger" })
                </div>
            </div>






            <div class="form-group" id="hiddenSubmitButton">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Ship Template to the Warehouse" class="btn btn-default" id="btn" />
                </div>
            </div>
        </div>
    }

    <div class="col-md-offset-2 col-md-10">

        <br>


        <button onclick="createblanktemplate()" id="blankTemplate">Initialise Template Foundations</button>
        <button onclick="seedCells()" id="seed_Cells">Seed Cells</button>

        <table id="myTable"><tr><span id="cellBuilderHelper">Click on the cells to make them alive</span></tr></table>

        <hr>
        <br>
        <button onclick="savetemplatedata()" id="newTemplate">Set Template in Stone</button>
        <div>
            <hr>

            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>



</div>









<!--

    <script>


        function cellheight() {
            var x = document.getElementById("high").value;
            var cells = document.getElementById("cells");
            cells.css("width",x);
            if (isNaN(x) || x < 1 || x > 20) {

                document.getElementById("high").innerHTML.setIdAttribute();

            }
        }
        function cellwidth() {
            var x = document.getElementById("wide").value;

            document.getElementById("cells").innerHTML.setIdAttribute.length = x;

            if (isNaN(x) || x < 1 || x > 20) {
                text = "Input not valid";
                document.getElementById("cells").innerHTML.setAttribute(lengthAdjust);
            }

        }


    </script>
-->